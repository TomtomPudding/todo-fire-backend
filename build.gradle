buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        // 全ファイルに open つける
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:${protobufVersion}")
    }
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'com.google.protobuf' version "${protobufVersion}"
    id "io.gitlab.arturbosch.detekt" version "${detektVersion}"
}

// https://github.com/detekt/detekt
detekt {
    input = files("src/main/kotlin")
    failFast = true // fail build on any finding
    buildUponDefaultConfig = true // preconfigure defaults
    config = files("config/detekt.yml")
    // point to your custom config defining rules to run, overwriting default behavior
    baseline = file("config/baseline.xml") // a way of suppressing issues before introducing detekt

    reports {
        html.enabled = true // observe findings in your browser with structure and code snippets
        xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
        txt.enabled = true // similar to the console output, contains issue signature to manually edit baseline files
    }
}

tasks.detekt.jvmTarget = "1.8"

apply plugin: "kotlin"
apply plugin: "kotlin-spring"

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
// 自動生成用
apply plugin: 'kotlin-kapt'
// grpc
apply plugin: 'com.google.protobuf'

group 'com.todo'
version '0.0.1'

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

repositories {
    jcenter()
}

dependencies {
    /* kotlin */
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    // kotlin コルーチン
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")

    /* spring */
    implementation("org.springframework.boot:spring-boot-starter-web")
    runtimeOnly("org.springframework.boot:spring-boot-devtools")
    implementation("org.springframework.security:spring-security-core:5.4.2")
    implementation("org.springframework.boot:spring-boot-starter-data-redis")

    /* json */
    implementation("com.squareup.moshi:moshi:${moshiVersion}")
    implementation("com.squareup.moshi:moshi-kotlin:${moshiVersion}")

    /* dynamodb */
    implementation("io.github.boostchicken:spring-data-dynamodb:${springDataDynamodbVersion}")

    // grpc コード生成用
    implementation("com.google.protobuf:protobuf-java:${protobuf_version}")

    implementation("io.grpc:grpc-protobuf:${grpc_version}")
    implementation("io.grpc:grpc-stub:${grpc_version}")
    implementation("io.grpc:grpc-netty:${grpc_version}")

//    implementation("com.squareup.okhttp3:logging-interceptor")

    // https://qiita.com/yt8492/items/345f4de495feb18201ff
    // https://github.com/marcoferrer/kroto-plus
    implementation("com.github.marcoferrer.krotoplus:kroto-plus-coroutines:$krotoplus_version")
    implementation("com.github.marcoferrer.krotoplus:kroto-plus-message:$krotoplus_version")
    implementation('io.github.lognet:grpc-spring-boot-starter:4.2.2')


    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

// grpc 生成タスク
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }
        coroutines {
            artifact = "com.github.marcoferrer.krotoplus:protoc-gen-grpc-coroutines:$krotoplus_version:jvm8@jar"
        }
        kroto {
            artifact = "com.github.marcoferrer.krotoplus:protoc-gen-kroto-plus:$krotoplus_version:jvm8@jar"
        }
    }

    generateProtoTasks {
        def krotoConfig = file("krotoPlusConfig.asciipb")

        all().each { task ->

            task.inputs.files krotoConfig

            task.plugins {
                grpc {}
                coroutines {}
                kroto {
                    outputSubDir = "java"
                    option "ConfigPath=$krotoConfig"
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/source/proto/main/java")
            srcDir("$buildDir/generated/source/proto/main/grpc")
            srcDir("$buildDir/generated/source/proto/main/coroutines")
        }
    }
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if ("io.grpc".equalsIgnoreCase(details.requested.group)) {
            details.useVersion "1.33.0"
        }
    }
}

test {
    useJUnitPlatform()
}